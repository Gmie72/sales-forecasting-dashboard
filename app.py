{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a50e7d6d-04ec-449e-831a-a74004a53391",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import streamlit as st\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d55142a3-2490-43a8-aca0-49d01878b9c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ðŸ“Œ Sales Forecasting Dashboard with Streamlit\n",
    "# Run with:  streamlit run app.py\n",
    "# Requirements: pandas, numpy, scikit-learn, matplotlib, seaborn, streamlit\n",
    "\n",
    "# ------------------------------\n",
    "# Streamlit App Layout\n",
    "# ------------------------------\n",
    "st.title(\"ðŸ“Š Sales Forecasting Dashboard\")\n",
    "st.write(\"Upload your sales dataset (CSV with `date` and `sales` columns).\")\n",
    "\n",
    "# File Upload\n",
    "uploaded_file = st.file_uploader(\"Upload CSV\", type=[\"csv\"])\n",
    "\n",
    "if uploaded_file is not None:\n",
    "    # ------------------------------\n",
    "    # 1. Load Dataset\n",
    "    # ------------------------------\n",
    "    data = pd.read_csv(uploaded_file)\n",
    "    st.subheader(\"Preview of Data\")\n",
    "    st.write(data.head())\n",
    "\n",
    "    # Ensure date column is datetime\n",
    "    data['date'] = pd.to_datetime(data['date'])\n",
    "\n",
    "    # ------------------------------\n",
    "    # 2. Feature Engineering\n",
    "    # ------------------------------\n",
    "    data['year'] = data['date'].dt.year\n",
    "    data['month'] = data['date'].dt.month\n",
    "    data['day'] = data['date'].dt.day\n",
    "    data['dayofweek'] = data['date'].dt.dayofweek\n",
    "\n",
    "    X = data[['year', 'month', 'day', 'dayofweek']]\n",
    "    y = data['sales']\n",
    "\n",
    "    # ------------------------------\n",
    "    # 3. Train/Test Split\n",
    "    # ------------------------------\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "    # ------------------------------\n",
    "    # 4. Train Model\n",
    "    # ------------------------------\n",
    "    model = LinearRegression()\n",
    "    model.fit(X_train, y_train)\n",
    "\n",
    "    # ------------------------------\n",
    "    # 5. Predictions\n",
    "    # ------------------------------\n",
    "    y_pred = model.predict(X_test)\n",
    "\n",
    "    mae = mean_absolute_error(y_test, y_pred)\n",
    "    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
    "\n",
    "    st.subheader(\"ðŸ“ˆ Model Performance\")\n",
    "    st.write(f\"**Mean Absolute Error (MAE):** {mae:.2f}\")\n",
    "    st.write(f\"**Root Mean Squared Error (RMSE):** {rmse:.2f}\")\n",
    "\n",
    "    # ------------------------------\n",
    "    # 6. Visualization\n",
    "    # ------------------------------\n",
    "    st.subheader(\"ðŸ”® Actual vs Predicted Sales\")\n",
    "\n",
    "    fig, ax = plt.subplots(figsize=(10,5))\n",
    "    ax.plot(y_test.values[:50], label=\"Actual Sales\", marker='o')\n",
    "    ax.plot(y_pred[:50], label=\"Predicted Sales\", marker='x')\n",
    "    ax.legend()\n",
    "    ax.set_title(\"Sales Forecasting (Sample of 50 Predictions)\")\n",
    "    ax.set_xlabel(\"Sample\")\n",
    "    ax.set_ylabel(\"Sales\")\n",
    "    st.pyplot(fig)\n",
    "\n",
    "    # ------------------------------\n",
    "    # 7. Future Prediction (Next 30 Days)\n",
    "    # ------------------------------\n",
    "    st.subheader(\"ðŸ“… Next 30 Days Forecast\")\n",
    "\n",
    "    last_date = data['date'].max()\n",
    "    future_dates = pd.date_range(start=last_date, periods=30, freq='D')\n",
    "\n",
    "    future_features = pd.DataFrame({\n",
    "        \"year\": future_dates.year,\n",
    "        \"month\": future_dates.month,\n",
    "        \"day\": future_dates.day,\n",
    "        \"dayofweek\": future_dates.dayofweek\n",
    "    })\n",
    "\n",
    "    future_predictions = model.predict(future_features)\n",
    "\n",
    "    future_df = pd.DataFrame({\n",
    "        \"date\": future_dates,\n",
    "        \"predicted_sales\": future_predictions\n",
    "    })\n",
    "\n",
    "    st.write(future_df)\n",
    "\n",
    "    # Plot forecast\n",
    "    fig2, ax2 = plt.subplots(figsize=(10,5))\n",
    "    ax2.plot(data['date'], data['sales'], label=\"Historical Sales\")\n",
    "    ax2.plot(future_df['date'], future_df['predicted_sales'], label=\"Forecast\", color='red')\n",
    "    ax2.legend()\n",
    "    ax2.set_title(\"30-Day Sales Forecast\")\n",
    "    st.pyplot(fig2)\n",
    "\n",
    "else:\n",
    "    st.info(\"ðŸ‘† Please upload a CSV file to start.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
